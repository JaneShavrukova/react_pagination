{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","pages","Math","ceil","generatePages","isFirstPageSelected","isLastPageSelected","getClassName","condition","cn","disabled","handleChangePage","textContent","currentTarget","className","href","onClick","map","page","active","ITEMS_PER_PAGE_OPTIONS","items","length","App","useState","setPerPage","setCurrentPage","fromPage","toPage","visibleItems","slice","id","value","onChange","event","target","option","htmlFor","item","ReactDOM","render","document","getElementById"],"mappings":"yLAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,2BCGIG,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YAEI,IADJC,oBACI,MADW,aACX,EACEC,EAAQC,KAAKC,KAAKN,EAAQC,GAC1BM,EAAgBd,EAAW,EAAGW,GAC9BI,EAAsC,IAAhBN,EACtBO,EAAqBP,IAAgBE,EAErCM,EAAe,SAACC,GAAD,OAAwBC,IAAG,YAC9C,CAAEC,SAAUF,KAQRG,EAAmB,SAAC,GAC2B,IAC3CC,EAD0C,EADxBC,cAElBD,YAEY,OAAhBA,GACFZ,GAAcY,IAIlB,OACE,qBAAIE,UAAU,aAAd,UACE,oBAAIA,UAAWP,EAAaF,GAA5B,SACE,mBACE,UAAQ,WACRS,UAAU,YACVC,KAAK,QACL,gBAAeV,EACfW,QAvBW,kBAAOX,GACvBL,EAAaD,EAAc,IAiBxB,oBAWDK,EAAca,KAAI,SAAAC,GAAI,OACrB,oBAEEJ,UAAWL,IAAG,YACZ,CAAEU,OAAQD,IAASnB,IAHvB,SAKE,mBACE,UAAQ,WACRe,UAAU,YACVC,KAAI,WAAMG,GACVF,QAASL,EAJX,SAMGO,KAVEA,MAeT,oBAAIJ,UAAWP,EAAaD,GAA5B,SACE,mBACE,UAAQ,WACRQ,UAAU,YACVC,KAAK,QACL,gBAAeT,EACfU,QAjDW,kBAAOV,GACvBN,EAAaD,EAAc,IA2CxB,wBClEFqB,EAAyB,CAAC,EAAG,EAAG,GAAI,IAIpCC,EAFmC/B,EAAW,EAExB,IAFkC2B,KAAI,SAACvB,GAAD,qBAAeA,MAG3EG,EAAQwB,EAAMC,OAEPC,EAAgB,WAC3B,MAA8BC,mBAAS,GAAvC,mBAAO1B,EAAP,KAAgB2B,EAAhB,KACA,EAAsCD,mBAAS,GAA/C,mBAAOzB,EAAP,KAAoB2B,EAApB,KAOMC,GAAY5B,EAAc,GAAKD,EAC/B8B,EAAS7B,EAAcD,EAAUD,EAAQA,EAC3CE,EAAcD,EACZ+B,EAAeR,EAAMS,MAAMH,EAAUC,GAE3C,OACE,sBAAKd,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWf,EADX,mBACiC4B,EAAW,EAD5C,cACmDC,EADnD,eACgE/B,EADhE,OAIA,sBAAKiB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,wBACE,UAAQ,kBACRiB,GAAG,kBACHjB,UAAU,eACVkB,MAAOlC,EACPmC,SAzBY,SAACC,GACrBT,GAAYS,EAAMC,OAAOH,OACzBN,EAAe,IAkBT,SAOGN,EAAuBH,KAAI,SAAAmB,GAAM,OAChC,wBAAQJ,MAAOI,EAAf,SAAqCA,GAATA,UAKlC,uBAAOC,QAAQ,kBAAkBvB,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEjB,MAAOA,EACPC,QAASA,EACTC,YAAaA,EACbC,aAAc0B,IAGhB,6BACGG,EAAaZ,KAAI,SAAAqB,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YC5DlCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.1fb8b57f.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import cn from 'classnames';\nimport { getNumbers } from '../../utils';\n\ninterface Props {\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: (page: number) => void;\n}\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange = () => {},\n}) => {\n  const pages = Math.ceil(total / perPage);\n  const generatePages = getNumbers(1, pages);\n  const isFirstPageSelected = currentPage === 1;\n  const isLastPageSelected = currentPage === pages;\n\n  const getClassName = (condition: boolean) => cn('page-item',\n    { disabled: condition });\n\n  const handlePrev = () => !isFirstPageSelected\n  && onPageChange(currentPage - 1);\n\n  const handleNext = () => !isLastPageSelected\n  && onPageChange(currentPage + 1);\n\n  const handleChangePage = ({ currentTarget }:\n  React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n    const { textContent } = currentTarget;\n\n    if (textContent !== null) {\n      onPageChange(+textContent);\n    }\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li className={getClassName(isFirstPageSelected)}>\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={isFirstPageSelected}\n          onClick={handlePrev}\n        >\n          «\n        </a>\n      </li>\n\n      {generatePages.map(page => (\n        <li\n          key={page}\n          className={cn('page-item',\n            { active: page === currentPage })}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${page}`}\n            onClick={handleChangePage}\n          >\n            {page}\n          </a>\n        </li>\n      ))}\n\n      <li className={getClassName(isLastPageSelected)}>\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={isLastPageSelected}\n          onClick={handleNext}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst ITEMS_PER_PAGE_OPTIONS = [3, 5, 10, 20];\n\nconst generateItems = (count: number) => getNumbers(1, count).map((n) => `Item ${n}`);\n\nconst items = generateItems(42);\nconst total = items.length;\n\nexport const App: React.FC = () => {\n  const [perPage, setPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const handlePerPage = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setPerPage(+event.target.value);\n    setCurrentPage(1);\n  };\n\n  const fromPage = (currentPage - 1) * perPage;\n  const toPage = currentPage * perPage > total ? total\n    : currentPage * perPage;\n  const visibleItems = items.slice(fromPage, toPage);\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${fromPage + 1} - ${toPage} of ${total})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={handlePerPage}\n          >\n            {ITEMS_PER_PAGE_OPTIONS.map(option => (\n              <option value={option} key={option}>{option}</option>\n            ))}\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={total}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={setCurrentPage}\n      />\n\n      <ul>\n        {visibleItems.map(item => (\n          <li data-cy=\"item\" key={item}>\n            {item}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}